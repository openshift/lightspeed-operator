---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  annotations:
    pipelinesascode.tekton.dev/task: "[ols-installer, ols-e2e-task]"
  name: ols-integration-tests-pipeline
spec:
  description: |
    This pipeline automates the process of running end-to-end tests for OpenShift Lightspeed
    using a ROSA (Red Hat OpenShift Service on AWS) cluster. The pipeline provisions
    the ROSA cluster, installs the OpenShift Lightspeed operator using the installer, runs the tests, collects artifacts,
    and finally deprovisions the ROSA cluster.
  params:
    - name: SNAPSHOT
      description: 'The JSON string representing the snapshot of the application under test.'
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - name: test-name
      description: 'The name of the test corresponding to a defined Konflux integration test.'
      default: 'ols-e2e-tests-4.19'
    - name: namespace
      description: 'Namespace to run tests in'
      default: 'openshift-lightspeed'
  tasks:
    - name: eaas-provision-space
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
      params:
        - name: ownerKind
          value: PipelineRun
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
    - name: provision-cluster
      runAfter:
        - eaas-provision-space
      taskSpec:
        results:
          - name: clusterName
            value: "$(steps.create-cluster.results.clusterName)"
        steps:
          - name: pick-version
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
            params:
              - name: prefix
                value: "4.19."
          - name: create-cluster
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
              - name: version
                value: "$(steps.pick-version.results.version)"
              - name: instanceType
                value: "m5.large"
              - name: imageContentSources
                value: |
                  - source: registry.redhat.io/openshift-lightspeed-tech-preview/lightspeed-rhel9-operator
                    mirrors:
                      - quay.io/redhat-user-workloads/crt-nshift-lightspeed-tenant/ols/lightspeed-operator
                  - source: registry.redhat.io/openshift-lightspeed-tech-preview/lightspeed-operator-bundle
                    mirrors:
                      - quay.io/redhat-user-workloads/crt-nshift-lightspeed-tenant/ols/bundle
                  - source: registry.redhat.io/openshift-lightspeed-tech-preview/lightspeed-service-api-rhel9
                    mirrors:
                      - quay.io/redhat-user-workloads/crt-nshift-lightspeed-tenant/ols/lightspeed-service
                  - source: registry.redhat.io/openshift-lightspeed-tech-preview/lightspeed-console-plugin-rhel9
                    mirrors:
                      - quay.io/redhat-user-workloads/crt-nshift-lightspeed-tenant/ols/lightspeed-console
    - name: get-bundle-images
      description: Task to install bundle onto ephemeral namespace
      runAfter:
        - provision-cluster
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: namespace
          value: "$(params.namespace)"
      taskSpec:
        results:
          - name: bundle-image
            value: "$(steps.get-bundle-image.results.bundle-image)"
          - name: commit
            value: "$(steps.get-bundle-image.results.commit)"
        params:
          - name: SNAPSHOT
          - name: namespace
            type: string
        volumes:
          - name: credentials
            emptyDir: {}
        steps:
          - name: get-bundle-image
            image: registry.redhat.io/openshift4/ose-cli:latest
            env:
              - name: SNAPSHOT
                value: $(params.SNAPSHOT)
            results:
              - name: bundle-image
                type: string
                description: "service image from snapshot"
              - name: commit
                type: string
                description: "commit sha to be used to store artifacts"
            script: |
              dnf -y install jq
              echo -n "$(jq -r --arg component_name "ols-bundle" '.components[] | select(.name == $component_name) | .containerImage' <<< "$SNAPSHOT")" > $(step.results.bundle-image.path)
              echo -n "$(jq -r --arg component_name "ols-bundle" '.components[] | select(.name == $component_name) | .source.git.revision' <<< "$SNAPSHOT")" > $(step.results.commit.path)
    - name: ols-service-tests
      description: Task to run tests from service repository
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: bundleimage
          value: $(tasks.get-bundle-images.results.bundle-image)
        - name: commit
          value: $(tasks.get-bundle-images.results.commit)
        - name: namespace
          value: "$(params.namespace)"
      runAfter:
        - get-bundle-images
      taskSpec:
        params:
          - name: SNAPSHOT
          - name: bundleimage
          - name: commit
          - name: namespace
            type: string
        volumes:
          - name: azure-openai-token
            secret:
              secretName: azureopenai-apitoken
          - name: azureopenai-entra-id
            secret:
              secretName: azureopenai-entra-id
          - name: bam-token
            secret:
              secretName: bam-apitoken
          - name: openai-token
            secret:
              secretName: openai
          - name: watsonx-token
            secret:
              secretName: watsonx-apitoken
          - name: insights-stage-upload-offline-token
            secret:
              secretName: insights-stage-upload-offline-token
          - name: ols-konflux-artifacts-bot-creds
            secret:
              secretName: ols-konflux-artifacts-bot
          - name: credentials
            emptyDir: {}
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: run-e2e-tests
            onError: continue
            resources:
              requests:
                cpu: '1'
                memory: 1Gi
              limits:
                memory: 10Gi
            volumeMounts:
              - name: azure-openai-token
                mountPath: /var/run/azure_openai
              - name: azureopenai-entra-id
                mountPath: /var/run/azureopenai-entra-id
              - name: bam-token
                mountPath: /var/run/bam
              - name: openai-token
                mountPath: /var/run/openai
              - name: watsonx-token
                mountPath: /var/run/watsonx
              - name: insights-stage-upload-offline-token
                mountPath: /var/run/insights-stage-upload-offline-token
              - name: credentials
                mountPath: /credentials
            env:
              - name: BAM_PROVIDER_KEY_PATH
                value: "/var/run/bam/token"
              - name: AZUREOPENAI_PROVIDER_KEY_PATH
                value: "/var/run/azure_openai/token"
              - name: OPENAI_PROVIDER_KEY_PATH
                value: "/var/run/openai/token"
              - name: WATSONX_PROVIDER_KEY_PATH
                value: "/var/run/watsonx/token"
              - name: KUBECONFIG
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              - name: ARTIFACT_DIR
                value: "/workspace/artifacts"
              - name: SUITE_ID
                value: "nosuite"
              - name: KONFLUX_BOOL
                value: "true"
              - name: OLS_IMAGE
                value: ""
              - name: BUNDLE_IMAGE
                value: "$(params.bundleimage)"
              - name: BUNDLE_COMMIT_SHA
                value: "$(params.commit)"
            image: registry.access.redhat.com/ubi9/ubi-minimal
            script: |
              echo "---------------------------------------------"
              echo "$KONFLUX_BOOL"
              echo "---------------------------------------------"
              echo "$BUNDLE_IMAGE"
              echo "---------------------------------------------"
              export OPERATOR_SDK_VERSION=1.36.1
              export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
              export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/v${OPERATOR_SDK_VERSION}
              curl -Lo /usr/local/bin/operator-sdk ${OPERATOR_SDK_DL_URL}/operator-sdk_linux_${ARCH}
              chmod +x /usr/local/bin/operator-sdk
              operator-sdk version
              echo "---------------------------------------------"
              microdnf -y install git make python3.11 python3.11-devel python3.11-pip shadow-utils tar jq
              curl -L -o oc.tar.gz https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest-4.15/openshift-client-linux-amd64-rhel9.tar.gz \
                  && tar -xvzf oc.tar.gz \
                  && chmod +x kubectl oc \
                  && mv oc kubectl /usr/local/bin/
              git clone https://github.com/openshift/lightspeed-operator.git
              cd lightspeed-operator
              git config --global user.email olsci@redhat.com
              git config --global user.name olsci
              git fetch origin ${BUNDLE_COMMIT_SHA}
              git pull origin ${BUNDLE_COMMIT_SHA} --rebase
              export SERVICE_SHA=$(cat related_images.json | jq '.[] | select(.name=="lightspeed-service-api")' | jq '.revision' | tr -d '"' )
              git clone https://github.com/openshift/lightspeed-service.git
              cd lightspeed-service
              git config --global user.email olsci@redhat.com
              git config --global user.name olsci
              git fetch origin ${SERVICE_SHA}
              git checkout ${SERVICE_SHA}
              pip3.11 install --no-cache-dir --upgrade pip pdm
              pdm config python.use_venv false
              export CP_OFFLINE_TOKEN=$(cat /var/run/insights-stage-upload-offline-token/token)
              export AZUREOPENAI_ENTRA_ID_TENANT_ID="$(cat /var/run/azureopenai-entra-id/tenant_id)"
              export AZUREOPENAI_ENTRA_ID_CLIENT_ID="$(cat /var/run/azureopenai-entra-id/client_id)"
              export AZUREOPENAI_ENTRA_ID_CLIENT_SECRET="$(cat /var/run/azureopenai-entra-id/client_secret)"
              tests/scripts/test-e2e-cluster.sh
          - name: gather-cluster-resources
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/tekton-integration-catalog
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/gather-cluster-resources/0.1/gather-cluster-resources.yaml
            params:
              - name: credentials
                value: "credentials"
              - name: kubeconfig
                value: "$(steps.get-kubeconfig.results.kubeconfig)"
              - name: artifact-dir
                value: "/workspace/konflux-artifacts"
          # validate that the cluster resources are available in another tekton step
          - name: list-artifacts
            image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
            workingDir: "/workspace"
            script: |
              #!/bin/bash
              ls -la /workspace
          - name: push-artifacts
            ref: 
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/tekton-integration-catalog.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/secure-push-oci/0.1/secure-push-oci.yaml
            params:
              - name: workdir-path
                value: /workspace
              - name: oci-ref
                value: "quay.io/openshift-lightspeed/ols-service-artifacts:$(params.commit)"
              - name: credentials-volume-name
                value: ols-konflux-artifacts-bot-creds
          - name: fail-if-any-step-failed
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/tekton-integration-catalog.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/fail-if-any-step-failed/0.1/fail-if-any-step-failed.yaml
